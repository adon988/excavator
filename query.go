package excavator

import (
	"crypto/tls"
	"io"
	"io/ioutil"
	"net/http"
)

type query struct {
	header http.Header
	url    string
}

//func (q *query) Header() http.Header {
//	return q.header
//}

func (q *query) SetHeader(header http.Header) {
	q.header = header
}

//func (q *query) URL() string {
//	return q.url
//}

type Query interface {
	//Header() http.Header
	SetHeader(header http.Header)
	//URL() string
	AJAX(body io.Reader) ([]byte, error)
}

func NewQuery(url string) Query {
	return &query{url: url}
}

func (q *query) AJAX(body io.Reader) (b []byte, e error) {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}
	//body := strings.NewReader(`wd=%E4%B9%99`)
	req, err := http.NewRequest("POST", q.url, body)
	if err != nil {
		return nil, err
	}
	req.Header = q.header

	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	return ioutil.ReadAll(resp.Body)
	//if err != nil {
	//	return nil, err
	//}
	//return UnmarshalRadical(bytes)
}
